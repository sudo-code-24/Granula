generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  roleId       Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  loginToken   String?
  tokenExpires DateTime?
  accounts     Account[]
  profile      Profile?
  sessions     Session[]
  cart         Cart?
  role         Role      @relation(fields: [roleId], references: [id])
}

model Profile {
  id         Int       @id @default(autoincrement())
  userId     Int       @unique
  firstName  String?
  lastName   String?
  position   String?
  department String?
  phone      String?
  address    String?
  hireDate   DateTime?
  user       User      @relation(fields: [userId], references: [id])
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  level       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  slug        String    @unique
  image       String?
  isActive    Boolean   @default(true)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Brand {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean   @default(true)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id                Int      @id @default(autoincrement())
  title             String
  description       String
  price             Float
  discountPercentage Float   @default(0)
  rating            Float   @default(0)
  stock             Int     @default(0)
  sku               String? @unique
  slug              String  @unique
  thumbnail         String?
  images            String[] @default([])
  tags              String[] @default([])
  isActive          Boolean  @default(true)
  categoryId        Int
  brandId           Int
  category          Category @relation(fields: [categoryId], references: [id])
  brand             Brand    @relation(fields: [brandId], references: [id])
  reviews           Review[]
  cartItems         CartItem[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  rating    Int
  comment   String?
  author    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([cartId, productId])
}
