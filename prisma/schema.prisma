generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  password     String
  roleId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  loginToken   String?
  tokenExpires DateTime?
  accounts     Account[]
  profile      Profile?
  sessions     Session[]
  role         Role      @relation(fields: [roleId], references: [id])
}

model Profile {
  id         String    @id @default(cuid())
  userId     String    @unique
  firstName  String?
  lastName   String?
  position   String?
  department String?
  phone      String?
  address    String?
  hireDate   DateTime?
  user       User      @relation(fields: [userId], references: [id])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  level       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
